Listing 2-8. The Contents of the MyView.cshtml File in the Views/Home Folder

@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>Index</title>
</head>
<body>
	<div>
		Hello World (from the view)
	</div>
</body>
</html>

The new contents of the view file are mostly HTML. The exception is the part 
that looks like this:

...
@{
Layout = null;
}
...

This is an expression that will be interpreted by Razor, which is the component 
that processes the contents of views and generates HTML that is sent to the browser. 
Razor is a view engine, and the expressions in views are known as Razor expressions.

The Razor expression in Listing 2-8 tells Razor that I chose not to use a layout, 
which is like a template for the HTML that will be sent to the browser (and which 
I describe in Chapter 22). To see the effect of creating the view, use Control+C 
to stop ASP.NET Core if it is running and use the dotnet run command to
compile and start the application again. Use a browser to request http://localhost:5000, 
and you will see the result shown in Figure 2-18.

Figure 2-18. Rendering a view

When I first edited the Index action method, it returned a string value. This meant 
that ASP.NET Core did nothing except pass the string value as is to the browser. 
Now that the Index method returns a ViewResult, Razor is used to process a view 
and render an HTML response. Razor was able to locate the