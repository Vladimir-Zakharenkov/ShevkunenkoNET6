Table 6-1. Chapter Summary

Problem							Solution								Listing

Creating a unit test project	Use the dotnet new command with 
								the project template for your
								preferred test framework.				8

Creating an XUnit test			Create a class with methods decorated 
								with the Fact attribute
								and use the Assert class to inspect 
								the test results.						10

Running unit tests				Use the Visual Studio or Visual Studio 
								Code test runners or use the dotnet 
								test command.							12

Isolating a component for		Create mock implementations of the 
testing							objects that the component under 
								test requires.							13–20

Preparing for This Chapter

To prepare for this chapter, I need to create a simple ASP.NET Core project. 
Open a new PowerShell command prompt using the Windows Start menu, navigate 
to a convenient location, and run the commands shown in Listing 6-1.

Tip
You can download the example project for this chapter—and for all the other 
chapters in this book—from https://github.com/apress/pro-asp.net-core-6.
See Chapter 1 for how to get help if you have problems running the examples.
 
Listing 6-1. Creating the Example Project

dotnet new globaljson --sdk-version 6.0.100 --output Testing/SimpleApp
dotnet new web --no-https --output Testing/SimpleApp --framework net6.0
dotnet new sln -o Testing

dotnet sln Testing add Testing/SimpleApp

These commands create a new project named SimpleApp using the web template, 
which contains the minimal configuration for ASP.NET Core applications. 
The project folder is contained within a solution folder also called Testing.

Opening the Project

If you are using Visual Studio, select File ➤ Open ➤ Project/Solution, 
select the Testing.sln file in the Testing folder, and click the Open button 
to open the solution file and the project it references. If you are using 
Visual Studio Code, select File ➤ Open Folder, navigate to the Testing 
folder, and click the Select Folder button.