Creating the Database Context Class

Entity Framework Core provides access to the database through a context class. 
Add a class file named StoreDbContext.cs to the Models folder and use it to define 
the class shown in Listing 7-16.

Listing 7-16. The Contents of the StoreDbContext.cs File 
in the SportsStore/Models Folder

using Microsoft.EntityFrameworkCore;

namespace SportsStore.Models {
	public class StoreDbContext : DbContext {

		public StoreDbContext(DbContextOptions<StoreDbContext> options)
			: base(options) { }

		public DbSet<Product> Products => Set<Product>();
	}
}

The DbContext base class provides access to the Entity Framework Core’s underlying 
functionality, and the Products property will provide access to the Product objects 
in the database. The StoreDbContext class is derived from DbContext and adds the properties 
that will be used to read and write the application’s data. There is only one property 
for now, which will provide access to Product objects.

Configuring Entity Framework Core

Entity Framework Core must be configured so that it knows the type of database to which 
it will connect, which connection string describes that connection, and which context 
class will present the data in the database. Listing 7-17 shows the required changes 
to the Program.cs file.

Listing 7-17. Configuring Entity Framework Core in the Program.cs File in the SportsStore Folder

using Microsoft.EntityFrameworkCore;
using SportsStore.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<StoreDbContext>(opts => {
	opts.UseSqlServer(
		builder.Configuration["ConnectionStrings:SportsStoreConnection"]);
});

var app = builder.Build();

app.UseStaticFiles();
app.MapDefaultControllerRoute();

app.Run();