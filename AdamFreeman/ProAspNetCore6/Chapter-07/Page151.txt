The IConfiguration interface provides access to the ASP.NET Core configuration system, 
which includes the contents of the appsettings.json file and which I describe in detail 
in Chapter 15. Access to the configuration data is through the builder.Configuration property, 
which allows the database connection string to be obtained. Entity Framework Core is 
configured with the AddDbContext method, which registers the database context class and 
configures the relationship with the database. The UseSQLServer method declares 
that SQL Server is being used.

Creating a Repository

The next step is to create a repository interface and implementation class. The repository 
pattern is one of the most widely used, and it provides a consistent way to access 
the features presented by the database context class. Not everyone finds a repository 
useful, but my experience is that it can reduce duplication and ensures that operations 
on the database are performed consistently. Add a class file named IStoreRepository.cs 
to the Models folder and use it to define the interface shown in Listing 7-18.

Listing 7-18. The Contents of the IStoreRepository.cs File in the SportsStore/Models Folder

namespace SportsStore.Models {
	public interface IStoreRepository {
		IQueryable<Product> Products { get; }
	}
}

This interface uses IQueryable<T> to allow a caller to obtain a sequence of Product objects. 
The IQueryable<T> interface is derived from the more familiar IEnumerable<T> interface and 
represents a collection of objects that can be queried, such as those managed by a database.

A class that depends on the IStoreRepository interface can obtain Product objects without 
needing to know the details of how they are stored or how the implementation class will 
deliver them.

UNDERSTANDING IENUMERABLE<T> AND IQUERYABLE<T> INTERFACES

The IQueryable<T> interface is useful because it allows a collection of objects to be queried
efficiently. Later in this chapter, I add support for retrieving a subset of Product objects from a
database, and using the IQueryable<T> interface allows me to ask the database for just the objects
that I require using standard LINQ statements and without needing to know what database server stores
the data or how it processes the query. Without the IQueryable<T> interface, I would have to retrieve
all of the Product objects from the database and then discard the ones that I don’t want, which
becomes an expensive operation as the amount of data used by an application increases. It is for this
reason that the IQueryable<T> interface is typically used instead of IEnumerable<T> in database
repository interfaces and classes.

However, care must be taken with the IQueryable<T> interface because each time the collection of
objects is enumerated, the query will be evaluated again, which means that a new query will be sent to
the database. This can undermine the efficiency gains of using IQueryable<T>. In such situations, you
can convert the IQueryable<T> interface to a more predictable form using the ToList or ToArray
extension method.