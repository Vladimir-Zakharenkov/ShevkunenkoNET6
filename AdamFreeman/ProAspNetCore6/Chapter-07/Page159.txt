The @model expression at the top of the file specifies that the view expects 
to receive a sequence of Product objects from the action method as its model data. 
I use an @foreach expression to work through the sequence and generate a simple 
set of HTML elements for each Product object that is received.

There is a quirk in the way that Razor Views work that means the model data 
is always nullable, even when the type specified by the @model expression is not. 
For this reason, I use the null-coalescing operator in the @foreach expression 
with an empty enumeration.

The view doesn’t know where the Product objects came from, how they were obtained, 
or whether they represent all the products known to the application. Instead, 
the view deals only with how details of each Product are displayed using HTML elements.

Tip
I converted the Price property to a string using the ToString("c") method, 
which renders numerical values as currency according to the culture settings 
that are in effect on your server. For example, if the server is set up as en-US, 
then (1002.3).ToString("c") will return $1,002.30, but if the server is
set to en-GB, then the same method will return £1,002.30.

Running the Application

Start ASP.NET Core and request http://localhost:5000 to see the list of products, 
which is shown in Figure 7-3. This is the typical pattern of development for ASP.NET Core. 
An initial investment of time setting everything up is necessary, and then 
the basic features of the application snap together quickly.

Figure 7-3. Displaying a list of products