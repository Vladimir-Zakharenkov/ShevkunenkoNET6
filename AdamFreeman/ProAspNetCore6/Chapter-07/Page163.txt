Adding the Tag Helper Class

Now that I have a view model, it is time to create a tag helper class. Create a folder named 
Infrastructure in the SportsStore project and add to it a class file called PageLinkTagHelper.cs, 
with the code shown in Listing 7-28. Tag helpers are a big part of ASP.NET Core development, 
and I explain how they work and how to use and create them in Chapters 25–27.

Tip
The Infrastructure folder is where I put classes that deliver the plumbing for an application but
that are not related to the application’s main functionality. You don’t have to follow 
this convention in your own projects.

Listing 7-28. The Contents of the PageLinkTagHelper.cs File 
in the SportsStore/Infrastructure Folder

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;
using SportsStore.Models.ViewModels;

namespace SportsStore.Infrastructure {

	[HtmlTargetElement("div", Attributes = "page-model")]
	public class PageLinkTagHelper : TagHelper {
		private IUrlHelperFactory urlHelperFactory;

		public PageLinkTagHelper(IUrlHelperFactory helperFactory) {
			urlHelperFactory = helperFactory;
		}

	[ViewContext]
	[HtmlAttributeNotBound]
	public ViewContext? ViewContext { get; set; }

	public PagingInfo? PageModel { get; set; }

	public string? PageAction { get; set; }

	public override void Process(TagHelperContext context,
			TagHelperOutput output) {
		if (ViewContext != null && PageModel != null) {
			IUrlHelper urlHelper = urlHelperFactory.GetUrlHelper(ViewContext);
			TagBuilder result = new TagBuilder("div");
			for (int i = 1; i <= PageModel.TotalPages; i++) {
				TagBuilder tag = new TagBuilder("a");
				tag.Attributes["href"] = urlHelper.Action(PageAction,
					new { productPage = i });
				tag.InnerHtml.Append(i.ToString());
				result.InnerHtml.AppendHtml(tag);
				}
			output.Content.AppendHtml(result.InnerHtml);
			}
		}
	}
}