The core part of the test verifies the tag helper output by using a literal string value 
that contains double quotes. C# is perfectly capable of working with such strings, 
as long as the string is prefixed with @ and uses two sets of double quotes ("") in place 
of one set of double quotes. You must remember not to break the literal string into separate 
lines unless the string you are comparing to is similarly broken. For example, the literal 
I use in the test method has wrapped onto several lines because the width of a printed page 
is narrow. I have not added a newline character; if I did, the test would fail.

Adding the View Model Data

I am not quite ready to use the tag helper because I have yet to provide an instance 
of the PagingInfo view model class to the view. To do this, I added a class file called 
ProductsListViewModel.cs to the Models/ViewModels folder of the SportsStore project 
with the content shown in Listing 7-30.

Listing 7-30. The Contents of the ProductsListViewModel.cs File 
in the SportsStore/Models/ViewModels Folder

namespace SportsStore.Models.ViewModels {
	public class ProductsListViewModel {
		public IEnumerable<Product> Products { get; set; } = Enumerable.Empty<Product>();
		public PagingInfo PagingInfo { get; set; } = new();
	}
}

I can update the Index action method in the HomeController class to use the ProductsListViewModel
class to provide the view with details of the products to display on the page and with details 
of the pagination, as shown in Listing 7-31.

Listing 7-31. Updating the Action Method in the HomeController.cs File 
in the SportsStore/Controllers Folder

using Microsoft.AspNetCore.Mvc;
using SportsStore.Models;
using SportsStore.Models.ViewModels;

namespace SportsStore.Controllers {
	public class HomeController : Controller {

		private IStoreRepository repository;
		public int PageSize = 4;
		public HomeController(IStoreRepository repo) {
		repository = repo;
	}

	public ViewResult Index(int productPage = 1)
		=> View(new ProductsListViewModel {
			Products = repository.Products
				.OrderBy(p => p.ProductID)
				.Skip((productPage - 1) * PageSize)
				.Take(PageSize),
				PagingInfo = new PagingInfo {
				CurrentPage = productPage,
				ItemsPerPage = PageSize,
				TotalItems = repository.Products.Count()
			}
		});
	}
}

These changes pass a ProductsListViewModel object as the model data to the view.