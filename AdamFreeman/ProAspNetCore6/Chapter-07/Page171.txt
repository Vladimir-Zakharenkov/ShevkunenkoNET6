The ASP.NET Core routing feature makes it easy to change the URL scheme in an application. 
All I need to do is add a new route in the Program.cs file, as shown in Listing 7-34.

Listing 7-34. Adding a New Route in the Program.cs File 
in the SportsStore Folder

using Microsoft.EntityFrameworkCore;
using SportsStore.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<StoreDbContext>(opts => {
	opts.UseSqlServer(
		builder.Configuration["ConnectionStrings:SportsStoreConnection"]);
});

builder.Services.AddScoped<IStoreRepository, EFStoreRepository>();

var app = builder.Build();

app.UseStaticFiles();

app.MapControllerRoute("pagination",
	"Products/Page{productPage}",
	new { Controller = "Home", action = "Index" });

app.MapDefaultControllerRoute();

SeedData.EnsurePopulated(app);

app.Run();

This is the only alteration required to change the URL scheme for product pagination. 
ASP.NET Core and the routing function are tightly integrated, so the application 
automatically reflects a change like this in the URLs used by the application, 
including those generated by tag helpers like the one I use to generate the
page navigation links.

Restart ASP.NET Core, request http://localhost:5000, and click one of the pagination 
links. The browser will navigate to a URL that uses the new URL scheme, as shown 
in Figure 7-6. Figure 7-6. The new URL scheme displayed in the browser