UNIT TEST: CATEGORY-SPECIFIC PRODUCT COUNTS

Testing that I am able to generate the current product count for different categories 
is simple. I create a mock repository that contains known data in a range of categories 
and then call the List action method requesting each category in turn. Here is the unit 
test method that I added to the HomeControllerTests class (you will need to import 
the System namespace for this test):

...
[Fact]
public void Generate_Category_Specific_Product_Count()
{
    // Arrange
    Mock<IStoreRepository> mock = new Mock<IStoreRepository>();
    mock.Setup(m => m.Products).Returns((new Product[] {
        new Product {ProductID = 1, Name = "P1", Category = "Cat1"},
        new Product {ProductID = 2, Name = "P2", Category = "Cat2"},
        new Product {ProductID = 3, Name = "P3", Category = "Cat1"},
        new Product {ProductID = 4, Name = "P4", Category = "Cat2"},
        new Product {ProductID = 5, Name = "P5", Category = "Cat3"}
}).AsQueryable<Product>());

    HomeController target = new HomeController(mock.Object);
    target.PageSize = 3;

    Func<ViewResult, ProductsListViewModel?> GetModel = result
    => result?.ViewData?.Model as ProductsListViewModel;

    // Action
    int? res1 = GetModel(target.Index("Cat1"))?.PagingInfo.TotalItems;
    int? res2 = GetModel(target.Index("Cat2"))?.PagingInfo.TotalItems;
    int? res3 = GetModel(target.Index("Cat3"))?.PagingInfo.TotalItems;
    int? resAll = GetModel(target.Index(null))?.PagingInfo.TotalItems;

    // Assert
    Assert.Equal(2, res1);
    Assert.Equal(2, res2);
    Assert.Equal(1, res3);
    Assert.Equal(5, resAll);
}
...

Notice that I also call the Index method, specifying no category, to make sure I get 
the correct total count as well.

Building the Shopping Cart

The application is progressing nicely, but I cannot sell any products until I implement 
a shopping cart. In this section, I will create the shopping cart experience shown 
in Figure 8-8. This will be familiar to anyone who has ever made a purchase online.

Figure 8-8. The basic shopping cart flow

An Add To Cart button will be displayed alongside each of the products in the catalog. 
Clicking this button will show a summary of the products the customer has selected so far, 
including the total cost. At this point, the user can click the Continue Shopping button 
to return to the product catalog or click the Checkout Now button to complete the order 
and finish the shopping session.