Figure 20.1 The SystemInfoTagHelper displays the machine name and operating
system on which the application is running. It can be useful for identifying which instance
of your app handled the request when running in a web farm scenario.

TIP
You probably don’t want to expose this sort of information in production,
so you could also wrap it in an <environment> Tag Helper, as you saw in
chapter 8.

The easiest way to create a custom Tag Helper is to derive from the TagHelper base
class and override the Process() or ProcessAsync() function that describes how the
class should render itself. The following listing shows your complete custom Tag
Helper, SystemInfoTagHelper, which renders the system information to a <div>. You
could easily extend this class if you wanted to display additional fields or add additional
options.

//Derives from the TagHelper base class
public class SystemInfoTagHelper : TagHelper
{
    //An HtmlEncoder is necessary when writing HTML content to the page.
    private readonly HtmlEncoder _htmlEncoder;
    public SystemInfoTagHelper(HtmlEncoder htmlEncoder)
    {
        _htmlEncoder = htmlEncoder;
    }

    //Decorating properties with HtmlAttributeName allows you to set their values from Razor markup.
    [HtmlAttributeName("add-machine")]
    public bool IncludeMachine { get; set; } = true;

    //Decorating properties with HtmlAttributeName allows you to set their values from Razor markup.
    [HtmlAttributeName("add-os")]
    public bool IncludeOS { get; set; } = true;

    //The main function called when an element is rendered
    public override void Process(TagHelperContext context, TagHelperOutput output)
    {
        //Replaces the <systeminfo> element with a <div> element
        output.TagName = "div";

        //Renders both the <div> </div> start and end tag
        output.TagMode = TagMode.StartTagAndEndTag;

        var sb = new StringBuilder();

        //If required, adds a <strong> element and the HTML-encoded machine name
        if (IncludeMachine)
        {
            sb.Append(" <strong>Machine</strong> ");
            sb.Append(_htmlEncoder.Encode(Environment.MachineName));
        }

        //If required, adds a <strong> element and the HTMLencoded OS name
        if (IncludeOS)
        {
            sb.Append("<br /> <strong>OS</strong> ");
            sb.Append(_htmlEncoder.Encode(RuntimeInformation.OSDescription));
        }

        //Sets the inner content of the <div> tag with the HTML-encoded value stored in the string builder
        output.Content.SetHtmlContent(sb.ToString());
    }
}
