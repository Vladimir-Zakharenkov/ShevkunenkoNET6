Taghelper and passing parameters

The second example will demonstrate the use of a tag helper instead of calling 
the Component.InvokeAsync method. It will also demonstrate passing parameters 
to the view component.

1. Add a new C# class file to the ViewComponents folder and name it UserViewComponent.cs. 
	Replace any existing content with the following:

using Microsoft.AspNetCore.Mvc;
using RazorPages.Services;
using System.Threading.Tasks;
namespace RazorPages.ViewComponents
{
    public class UserViewComponent : ViewComponent
    {
        private IUserService _userService;
        public UserViewComponent(IUserService userService)
        {
            _userService = userService;
        }
        public async Task<IViewComponentResult> InvokeAsync(int id)
        {
            var user = await _userService.GetUserAsync(id);
            return View(user);
        }
    }
}

This is the code part of the view component. The only difference between this component 
and the previous one is that the InvokeAsync method expects a parameter of type int 
to be passed, which is then passed to the service method.

2.  Add a new folder to the /Pages/Components folder named User. Add a Razor file 
    to the folder named default.cshtml. The structure of the Components folder 
    should now look like this:

3.  Replace any existing content in the new default.cshtml file with the following:

@model RazorPages.User
<h3>Featured User</h3>
<div>
    <strong>@Model.Name</strong><br />
    @Model.Website<br />
    @Model.Company.Name<br />
</div>

4.  Open the ViewImports.cshtml file and add the following line to the existing code:

@addTagHelper *, RazorPages

This registers the view component tag.

5.  Replace the call to @await Component.InvokeAync("Users") in the layout file 
    with the following:

<vc:user id="new Random().Next(1, 10)"></vc:user>

The name of the view component is specified in the tag helper, along with 
the parameter for the InvokeAsync method. In this case, the Random class is 
used to return any number from 1-10 each time the component is invoked, 
resulting in a user being selected randomly each time the page is displayed.

Note that the name of the component and its parameters must be specified 
in kebab case in the tag helper. Kebab case takes upper case characters and 
replaces them with their lowercase version, prefixing those that appear 
within the word with a hyphen. So a MainNavigation view component becomes 
main-navigation in the tag helper. A productId parameter name becomes product-id.

6.  Run the application to test that the component is working, and refresh 
    a few times to see different users' details being displayed:

    If you prefer to use the Component.InvokeAsync method, parameters are passed 
    as a second argument:

    @await Component.InvokeAsync("User", new Random().Next(1, 10))